# Enhanced CI/CD with improved error messaging and comprehensive testing
name: Enhanced CI/CD Pipeline with Security & Observability

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  
  # Enhanced error reporting
  FORCE_COLOR: '1'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Pre-flight checks with enhanced error messaging
  preflight-checks:
    name: 🚀 Pre-flight Validation
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security.outputs.status }}
      dependencies-status: ${{ steps.deps.outputs.status }}
      lint-status: ${{ steps.lint.outputs.status }}
    steps:
      - name: 📋 Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run preflight cross-component install check
        run: ./.github/preflight/check_cross_component_installs.sh
          
      - name: 🔍 Enhanced Security Scan
        id: security
        run: |
          echo "::group::🛡️ Security Vulnerability Scan"
          
          # Enhanced sensitive data detection
          echo "🔍 Scanning for sensitive data patterns..."
          
          VIOLATIONS=()
          
          # API Keys and Secrets (exclude test fixtures which may intentionally contain fake keys)
          if grep -r -E "(api[_-]?key|password|secret|token)" --include="*.js" --include="*.py" --include="*.json" --exclude-dir=node_modules --exclude-dir=__pycache__ --exclude-dir=test --exclude-dir=tests . | grep -v "# This is a test" | grep -v "placeholder" | grep -v "example"; then
            VIOLATIONS+=("🚨 CRITICAL: Potential API keys or secrets found in source code")
          fi
          
          # Internal IP addresses (exclude test fixtures)
          if grep -r -E "(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.)" --include="*.js" --include="*.py" --include="*.yml" --include="*.yaml" --exclude-dir=node_modules --exclude-dir=test --exclude-dir=tests .; then
            VIOLATIONS+=("⚠️ WARNING: Internal IP addresses found - ensure these are not production IPs")
          fi
          
          # Database connection strings
          if grep -r -E "(mongodb://|mysql://|postgresql://|redis://)" --include="*.js" --include="*.py" --include="*.env*" --exclude-dir=node_modules --exclude-dir=test --exclude-dir=tests .; then
            VIOLATIONS+=("🚨 CRITICAL: Database connection strings found in source code")
          fi
          
          # AWS keys pattern
          if grep -r -E "(AKIA[0-9A-Z]{16})" --include="*.js" --include="*.py" --include="*.json" --exclude-dir=node_modules --exclude-dir=test --exclude-dir=tests .; then
            VIOLATIONS+=("🚨 CRITICAL: AWS access keys found in source code")
          fi
          
          # Report violations with enhanced messaging
          if [ ${#VIOLATIONS[@]} -gt 0 ]; then
            echo "❌ SECURITY VIOLATIONS DETECTED:"
            for violation in "${VIOLATIONS[@]}"; do
              echo "  $violation"
            done
            echo ""
            echo "🔧 REMEDIATION STEPS:"
            echo "  1. Remove sensitive data from source code"
            echo "  2. Use environment variables or secret management"
            echo "  3. Add patterns to .gitignore if needed"
            echo "  4. Consider using git-secrets or similar tools"
            echo ""
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No security violations detected"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: 📦 Dependency Vulnerability Check
        id: deps
        run: |
          echo "::group::📦 Dependency Security Analysis"
          
          # Check Python dependencies
          if [ -f "backend/requirements.txt" ]; then
            echo "🐍 Analyzing Python dependencies..."
            pip install safety
            if ! safety check -r backend/requirements.txt --json; then
              echo "❌ PYTHON DEPENDENCY VULNERABILITIES FOUND"
              echo ""
              echo "🔧 REMEDIATION:"
              echo "  1. Review the vulnerability report above"
              echo "  2. Update affected packages: pip install -U package_name"
              echo "  3. Test thoroughly after updates"
              echo "  4. Consider using pip-audit for ongoing monitoring"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          # Check Node.js dependencies
          if [ -f "frontend/package.json" ]; then
            echo "📦 Analyzing Node.js dependencies..."
            cd frontend
            npm audit --audit-level=high --json > audit-results.json || true
            
            if [ -s audit-results.json ] && [ "$(cat audit-results.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')" != "0" ]; then
              echo "❌ NODE.JS DEPENDENCY VULNERABILITIES FOUND"
              echo ""
              echo "📊 Vulnerability Summary:"
              cat audit-results.json | jq '.metadata.vulnerabilities'
              echo ""
              echo "🔧 REMEDIATION:"
              echo "  1. Run: npm audit fix"
              echo "  2. For breaking changes: npm audit fix --force"
              echo "  3. Update package.json manually if needed"
              echo "  4. Test application thoroughly"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            cd ..
          fi
          
          echo "✅ No critical dependency vulnerabilities found"
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: 🧹 Code Quality & Linting
        id: lint
        run: |
          echo "::group::🧹 Code Quality Analysis"
          
          LINT_ERRORS=()
          
          # Python linting
          if [ -f "backend/requirements.txt" ]; then
            echo "🐍 Analyzing Python code quality..."
            pip install flake8 black isort mypy
            
            # Check Python formatting
            if ! black --check backend/ --diff; then
              LINT_ERRORS+=("Python code formatting issues found - run 'black backend/' to fix")
            fi
            
            # Check import sorting
            if ! isort --check-only backend/ --diff; then
              LINT_ERRORS+=("Python import sorting issues found - run 'isort backend/' to fix")
            fi
            
            # Basic linting
            if ! flake8 backend/ --max-line-length=120 --extend-ignore=E203,W503; then
              LINT_ERRORS+=("Python linting issues found - see flake8 output above")
            fi
          fi
          
          # JavaScript/TypeScript linting
          if [ -f "frontend/package.json" ]; then
            echo "📦 Analyzing JavaScript/TypeScript code quality..."
            cd frontend
            npm install
            
            if ! npm run lint 2>/dev/null; then
              LINT_ERRORS+=("JavaScript/TypeScript linting issues found - run 'npm run lint:fix' to fix")
            fi
            cd ..
          fi
          
          # Report linting issues
          if [ ${#LINT_ERRORS[@]} -gt 0 ]; then
            echo "❌ CODE QUALITY ISSUES DETECTED:"
            for error in "${LINT_ERRORS[@]}"; do
              echo "  🔸 $error"
            done
            echo ""
            echo "🔧 QUICK FIXES:"
            echo "  1. Run the suggested commands above"
            echo "  2. Configure your IDE for automatic formatting"
            echo "  3. Consider pre-commit hooks for consistent quality"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Code quality checks passed"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

  # Enhanced backend testing with better error reporting
  backend-tests:
    name: 🐍 Backend Testing & Validation
    runs-on: ubuntu-latest
    needs: preflight-checks
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python with enhanced caching
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: 📦 Install dependencies with error handling
        run: |
          echo "::group::📦 Installing Python Dependencies"
          cd backend
          
          # Upgrade pip first
          python -m pip install --upgrade pip
          
          # Install dependencies with detailed error reporting
          if ! pip install -r requirements.txt; then
            echo "❌ DEPENDENCY INSTALLATION FAILED"
            echo ""
            echo "🔧 TROUBLESHOOTING STEPS:"
            echo "  1. Check requirements.txt for conflicting versions"
            echo "  2. Try installing packages individually to isolate issues"
            echo "  3. Check for platform-specific dependencies"
            echo "  4. Verify Python version compatibility"
            echo ""
            echo "📊 Environment Info:"
            echo "  Python Version: $(python --version)"
            echo "  Pip Version: $(pip --version)"
            echo "  Platform: $(uname -a)"
            exit 1
          fi
          
          # Install test dependencies
          pip install pytest pytest-asyncio pytest-cov httpx
          echo "✅ Dependencies installed successfully"
          echo "::endgroup::"

      - name: 🔍 Elasticsearch Service Validation
        run: |
          echo "::group::🔍 Validating Elasticsearch Service"
          
          # Wait for Elasticsearch to be ready
          echo "⏳ Waiting for Elasticsearch to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:9200/_cluster/health >/dev/null 2>&1; then
              echo "✅ Elasticsearch is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ ELASTICSEARCH STARTUP FAILED"
              echo ""
              echo "🔧 TROUBLESHOOTING:"
              echo "  1. Check Elasticsearch logs: docker logs <container_id>"
              echo "  2. Verify service configuration in workflow"
              echo "  3. Check port availability and networking"
              echo "  4. Ensure sufficient memory allocation"
              echo ""
              echo "📊 Current Status:"
              curl -s http://localhost:9200/_cluster/health || echo "Connection failed"
              exit 1
            fi
            echo "  Attempt $i/30 - waiting..."
            sleep 2
          done
          
          # Validate cluster health
          HEALTH=$(curl -s http://localhost:9200/_cluster/health | jq -r '.status')
          echo "📊 Cluster Health: $HEALTH"
          
          if [ "$HEALTH" != "green" ] && [ "$HEALTH" != "yellow" ]; then
            echo "❌ Elasticsearch cluster is not healthy (status: $HEALTH)"
            exit 1
          fi
          echo "::endgroup::"

      - name: 🧪 Run Backend Tests with Enhanced Reporting
        run: |
          echo "::group::🧪 Backend Test Execution"
          cd backend
          
          # Set test environment variables
          export ELASTICSEARCH_URL=http://localhost:9200
          export ENVIRONMENT=test
          export LOG_LEVEL=DEBUG
          
          # Run tests with comprehensive reporting
          echo "🏃 Running test suite..."
          
          if ! python -m pytest \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --tb=short \
            --durations=10 \
            -v \
            ../test/; then
            
            echo ""
            echo "❌ BACKEND TESTS FAILED"
            echo ""
            echo "🔧 DEBUGGING STEPS:"
            echo "  1. Check test output above for specific failures"
            echo "  2. Run tests locally: cd backend && python -m pytest ../test/ -v"
            echo "  3. Check Elasticsearch connectivity: curl http://localhost:9200"
            echo "  4. Verify environment variables are set correctly"
            echo "  5. Check for import errors or missing dependencies"
            echo ""
            echo "📊 Test Environment:"
            echo "  Python Version: $(python --version)"
            echo "  Pytest Version: $(python -m pytest --version)"
            echo "  Elasticsearch URL: $ELASTICSEARCH_URL"
            echo "  Environment: $ENVIRONMENT"
            exit 1
          fi
          
          echo "✅ All backend tests passed successfully"
          echo "::endgroup::"

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Enhanced frontend testing
  frontend-tests:
    name: 📦 Frontend Testing & Build Validation
    runs-on: ubuntu-latest
    needs: preflight-checks
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js with enhanced caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Frontend Dependencies
        run: |
          echo "::group::📦 Installing Frontend Dependencies"
          cd frontend
          
          # Clean install for consistency
          if ! npm ci; then
            echo "❌ FRONTEND DEPENDENCY INSTALLATION FAILED"
            echo ""
            echo "🔧 TROUBLESHOOTING STEPS:"
            echo "  1. Delete package-lock.json and node_modules"
            echo "  2. Run 'npm install' to regenerate lock file"
            echo "  3. Check for conflicting peer dependencies"
            echo "  4. Verify Node.js version compatibility"
            echo ""
            echo "📊 Environment Info:"
            echo "  Node Version: $(node --version)"
            echo "  NPM Version: $(npm --version)"
            echo "  Platform: $(uname -a)"
            exit 1
          fi
          
          echo "✅ Frontend dependencies installed successfully"
          echo "::endgroup::"

      - name: 🧪 Run Frontend Tests
        run: |
          echo "::group::🧪 Frontend Test Execution"
          cd frontend
          
          if ! npm test -- --coverage --watchAll=false; then
            echo ""
            echo "❌ FRONTEND TESTS FAILED"
            echo ""
            echo "🔧 DEBUGGING STEPS:"
            echo "  1. Check test output above for specific failures"
            echo "  2. Run tests locally: cd frontend && npm test"
            echo "  3. Check for component rendering issues"
            echo "  4. Verify mock configurations"
            echo "  5. Ensure test environment is properly configured"
            echo ""
            echo "📊 Test Environment:"
            echo "  Node Version: $(node --version)"
            echo "  React Scripts Version: $(npm list react-scripts --depth=0)"
            exit 1
          fi
          
          echo "✅ All frontend tests passed successfully"
          echo "::endgroup::"

      - name: 🏗️ Build Frontend Application
        run: |
          echo "::group::🏗️ Building Frontend Application"
          cd frontend
          
          if ! npm run build; then
            echo ""
            echo "❌ FRONTEND BUILD FAILED"
            echo ""
            echo "🔧 DEBUGGING STEPS:"
            echo "  1. Check build output above for specific errors"
            echo "  2. Run build locally: cd frontend && npm run build"
            echo "  3. Check for TypeScript errors"
            echo "  4. Verify environment variables"
            echo "  5. Check for missing dependencies or imports"
            echo ""
            echo "📊 Build Environment:"
            echo "  Node Version: $(node --version)"
            echo "  Available Memory: $(free -h)"
            echo "  Disk Space: $(df -h)"
            exit 1
          fi
          
          echo "✅ Frontend build completed successfully"
          echo "::endgroup::"

  # Enhanced integration testing
  integration-tests:
    name: 🔗 Integration & E2E Testing
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build and Start Application Stack
        run: |
          echo "::group::🐳 Application Stack Startup"
          
          # Build the application
          if ! docker-compose -f docker-compose.yml build; then
            echo "❌ APPLICATION BUILD FAILED"
            echo ""
            echo "🔧 DEBUGGING STEPS:"
            echo "  1. Check Dockerfile syntax in each service"
            echo "  2. Verify base image availability"
            echo "  3. Check for missing files in build context"
            echo "  4. Review docker-compose.yml configuration"
            exit 1
          fi
          
          # Start the application
          if ! docker-compose -f docker-compose.yml up -d; then
            echo "❌ APPLICATION STARTUP FAILED"
            echo ""
            echo "🔧 DEBUGGING STEPS:"
            echo "  1. Check service logs: docker-compose logs <service>"
            echo "  2. Verify port availability"
            echo "  3. Check environment variable configuration"
            echo "  4. Ensure all dependencies are available"
            echo ""
            echo "📊 Container Status:"
            docker-compose ps
            exit 1
          fi
          
          echo "✅ Application stack started successfully"
          echo "::endgroup::"

      - name: ⏳ Wait for Services to be Ready
        run: |
          echo "::group::⏳ Service Health Checks"
          
          # Wait for backend
          echo "🔍 Waiting for backend service..."
          for i in {1..60}; do
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "✅ Backend service is ready"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ BACKEND SERVICE FAILED TO START"
              echo ""
              echo "📊 Service Logs:"
              docker-compose logs backend
              exit 1
            fi
            sleep 2
          done
          
          # Wait for frontend
          echo "🔍 Waiting for frontend service..."
          for i in {1..60}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Frontend service is ready"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ FRONTEND SERVICE FAILED TO START"
              echo ""
              echo "📊 Service Logs:"
              docker-compose logs frontend
              exit 1
            fi
            sleep 2
          done
          
          echo "✅ All services are ready"
          echo "::endgroup::"

      - name: 🧪 Run Integration Tests
        run: |
          echo "::group::🧪 Integration Test Execution"
          
          # Basic API endpoint tests
          echo "🔍 Testing API endpoints..."
          
          # Test health endpoint
          if ! curl -f http://localhost:8000/health; then
            echo "❌ Health endpoint failed"
            exit 1
          fi
          
          # Test query endpoint
          if ! curl -f -X POST http://localhost:8000/query \
            -H "Content-Type: application/json" \
            -d '{"index": "test", "query": {"match_all": {}}}'; then
            echo "❌ Query endpoint failed"
            exit 1
          fi
          
          echo "✅ Integration tests completed successfully"
          echo "::endgroup::"

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up test environment..."
          docker-compose down -v
          docker system prune -f

  # Enhanced deployment readiness check
  deployment-readiness:
    name: 🚀 Deployment Readiness Assessment
    runs-on: ubuntu-latest
    needs: [preflight-checks, backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📋 Deployment Readiness Report
        run: |
          echo "::group::🚀 Deployment Readiness Report"
          
          echo "✅ DEPLOYMENT READINESS CHECKLIST:"
          echo "  🔒 Security scans: PASSED"
          echo "  🧪 Backend tests: PASSED"
          echo "  📦 Frontend tests: PASSED"
          echo "  🔗 Integration tests: PASSED"
          echo "  📊 Code coverage: ADEQUATE"
          echo "  🏗️ Build verification: PASSED"
          echo ""
          echo "🎯 Ready for deployment to production!"
          echo ""
          echo "📋 Post-deployment verification steps:"
          echo "  1. Monitor application health endpoints"
          echo "  2. Check error rates and response times"
          echo "  3. Verify all integrations are working"
          echo "  4. Run smoke tests on production"
          echo "  5. Monitor logs for any anomalies"
          echo "::endgroup::"

      - name: 🏷️ Create Release Tag
        if: success()
        run: |
          echo "🏷️ Creating release tag for successful deployment..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Generate version based on timestamp
          VERSION="v$(date +'%Y.%m.%d')-${{ github.run_number }}"
          git tag -a $VERSION -m "Automated release $VERSION"
          git push origin $VERSION || true
          
          echo "✅ Release tag $VERSION created successfully"
