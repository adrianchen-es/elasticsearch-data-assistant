version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - AZURE_AI_API_KEY=${AZURE_AI_API_KEY}
      - AZURE_AI_ENDPOINT=${AZURE_AI_ENDPOINT}
      - AZURE_AI_DEPLOYMENT=${AZURE_AI_DEPLOYMENT}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - OTEL_SERVICE_NAME=elasticsearch-ai-backend
      - OTEL_SEMCONV_STABILITY_OPT_IN=http
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV:-development}
      - OTEL_PYTHON_INSTRUMENTATION_ELASTICSEARCH_ENABLED=true
      - OTEL_PYTHON_INSTRUMENTATION_ELASTICSEARCH_CAPTURE_SEARCH_QUERY=raw
    ports:
      - "8000:8000"
    depends_on:
      - elasticsearch
      - redis
    networks:
      - app-network

  gateway:
    build: 
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    environment:
      - NODE_ENV=production
      - PORT=3100
      - OTEL_SEMCONV_STABILITY_OPT_IN=http
      - BACKEND_BASE_URL=http://backend:8000
      - OTEL_SERVICE_NAME=es-data-assistant-gateway
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
    ports:
      - "3100:3100" # optional public; nginx uses service name internally
    depends_on:
      - backend
      - otel-collector
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_OTEL_METRIC_ENDPOINT=${REACT_APP_OTEL_METRIC_ENDPOINT:-http://otel-collector:4318/v1/metrics}
      - REACT_APP_OTEL_TRACE_ENDPOINT=${REACT_APP_OTEL_TRACE_ENDPOINT:-http://otel-collector:4318/v1/traces}
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    networks:
      - app-network

  otel-collector:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 1.5G
    restart: unless-stopped
    command: ["--config", "/etc/otelcol-config.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
    environment:
      - HOST_FILESYSTEM
      - ELASTIC_AGENT_OTEL
      - ELASTIC_API_KEY
      - ELASTIC_ENDPOINT
      - STORAGE_DIR=/usr/share/elastic-agent
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    # network_mode: host
    networks:
      - app-network

  # otel-collector:
    # image: otel/opentelemetry-collector-contrib:latest
    # container_name: otel-collector
    # command: ["--config=/etc/otel-collector-config.yaml"]
    # volumes:
    #   - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    # environment:
    #   - OTEL_COLLECTOR_EXPORTER_OTLP=${OTEL_COLLECTOR_EXPORTER_OTLP:-http://localhost:8200}
    #   - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN:-SomeSecret}
    # ports:
    #   - "4317:4317"   # OTLP gRPC receiver
    #   - "4318:4318"   # OTLP HTTP receiver
    #   - "8889:8889"   # Prometheus metrics
    # networks:
    #   - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  es_data:
    driver: local

networks:
  app-network:
    driver: bridge
